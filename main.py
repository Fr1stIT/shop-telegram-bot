import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
import keyboards as kb
from aiogram.fsm.context import FSMContext
from conf import bot_api
from aiogram.filters.command import Command
from db_postgres import Database
from states import *


from aiogram.filters import CommandStart, CommandObject



bot = Bot(token=bot_api)
dp = Dispatcher()

admin_id = (1061467560,)

async def main():
    await dp.start_polling(bot)

db_params = {
    "host": "localhost",
    "database": "TgShop",
    "user": "postgres",
    "password": "7292",
    "port": "5432"
}
db = Database(db_params)


@dp.message(CommandStart(deep_link=True))
async def handler(message: Message, command: CommandObject, state: FSMContext):
    if db.get_info(message.from_user.id) == []:
        print('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
        db.add_user(message.from_user.id, message.from_user.username)
    # print(db.get_info(message.from_user.id))
    args = command.args
    print(f'–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: {args}')
    data = db.get_info_product_id(args)
    data = data[0]
    # print(data[5])
    stringformat = f'<b>üõí –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:</b> üõí\n<b>üí´ –ù–∞–∑–≤–∞–Ω–∏–µ</b> - {data[1]}\nüí´ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b> - {data[3]}\nüí´ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b> - <b>{data[2]}</b>'

    await bot.send_photo(chat_id=message.chat.id, photo=types.FSInputFile(path=data[4]), caption=stringformat, reply_markup=kb.ver_button('–ö—É–ø–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'), parse_mode='html')
    await state.update_data(order=data[0], cost=data[2])
    await state.set_state(Buy_item.address)


@dp.message(Command('start'))
async def strt_command (message: Message):
    if message.from_user.id in admin_id:
        await message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.main_kb_admin)
    else:
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª t.me/xxx', reply_markup=kb.main_kb)
        try:
            print('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
            db.add_user(message.from_user.id, message.from_user.username)
        except:
            pass



###########################################################################################################################


@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã')
async def add_new_it (message: Message, state: FSMContext):
    if message.from_user.id in admin_id:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(Add_new_prod.name)


@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def delete_it (message: Message, state: FSMContext):
    if message.from_user.id in admin_id:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb.prod_button(db.get_products()))
        await state.set_state(Delete_prod.name_of_it)

############################################################################################################################


@dp.callback_query(Delete_prod.name_of_it)
async def get_name_of_the_prd(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    data = db.get_info_product(callback.data)
    data = data[0]
    print(data)
    await callback.message.answer(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> - {data[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b> - {data[3]}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b> - {data[2]}', reply_markup=kb.ver_button('–î–∞','–ù–µ—Ç'), parse_mode='html')
    await state.update_data(name_of_it=data[1])
    await state.set_state(Delete_prod.rep)

@dp.callback_query(Delete_prod.rep)
async def get_name_of_the_prd(callback: CallbackQuery, state: FSMContext):

    if callback.data == '–î–∞':
        data = await state.get_data()
        data = data["name_of_it"]
        await callback.answer('')
        await callback.message.answer(f'<b>üóë –í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä:</b> {data}', parse_mode='html')
        db.delete_item(data)

    elif callback.data == '–ù–µ—Ç':
        await callback.answer('')
        await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!')
    await state.clear()


#######################################################################################################################################


@dp.message(Add_new_prod.name)
async def name_of_prd (message: Message, state: FSMContext):
    if message.from_user.id in admin_id:
        await state.update_data(name=message.text)
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(Add_new_prod.about)

@dp.message(Add_new_prod.about)
async def about_prd (message: Message, state: FSMContext):
    if message.from_user.id in admin_id:
        await state.update_data(about=message.text)
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(Add_new_prod.price)





@dp.message(Add_new_prod.price)
async def price_of_prd (message: Message, state: FSMContext):

    await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞')
    await state.update_data(price=message.text)
    await state.set_state(Add_new_prod.photo)


@dp.message(Add_new_prod.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data1 = await state.get_data()
    file_name = f"img/{data1['name']}.jpg"
    await message.bot.download(file=message.photo[-1].file_id, destination=file_name)
    await message.reply(f'‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä: \n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> - {data1["name"]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b> - {data1["about"]}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b> - {data1["price"] + "‚ÇΩ"}', parse_mode='html')
    product_id = db.add_product(data1["name"], data1["about"], data1["price"], file_name)
    await message.answer(f'üîó https://t.me/fristshop_bot?start={product_id[0]} üîó')


#########################################################################################################################################################


@dp.callback_query(Buy_item.address)
async def item_buy(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        await callback.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ :(')
    else:
        await callback.answer('')
        await callback.message.answer(
            f'üè† –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å. –ü—Ä–∏–º–µ—Ä: –≥.–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª.–ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∞—è –ø–ª.4',)

        await state.set_state(Buy_item.phone_number)



@dp.message(Buy_item.phone_number)
async def item_buy (message: Message, state: FSMContext):
    await message.answer(
        f'üë§ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é')
    await state.update_data(address = message.text)
    await state.set_state(Buy_item.name)


@dp.message(Buy_item.name)
async def item_buy (message: Message, state: FSMContext):
    await message.answer(
        f'üìû –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: +7952812999')
    await state.update_data(name = message.text)
    await state.set_state(Buy_item.order)



@dp.message(Buy_item.order)
async def item_buy (message: Message, state: FSMContext):
    phone_number = message.text
    data = await state.get_data()
    print(data)
    db.order(data["name"],message.from_user.id, data["order"], data["address"], phone_number)
    await message.answer(
        f'‚úÖ <b>–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {message.from_user.id} –æ—Ç–∫—Ä—ã—Ç!</b> ‚úÖ\nüè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {data["address"]}\nüìû <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n<b>–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel</b>\nüí∏ –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É <b>+79951714556 (–ï–ª–µ–Ω–∞ –†.)</b> —Å—É–º–º—É <b>{data["cost"]}</b> –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç.', parse_mode='html')

    await state.set_state(Buy_item.check)




@dp.message(Buy_item.check and Command('cancel'))
async def canccel_but (message: Message, state: FSMContext):
    await state.clear()
    await message.reply('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞! ‚ùå')
    #–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞)
    db.cancel_order(message.from_user.id)



@dp.message(Buy_item.check)
async def verify_buy (message: Message, state: FSMContext):
    #–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É (–ø–æ user_id —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞—Ä–∞–Ω–µ–µ)
    if message.photo or message.document:
        data = await state.get_data()
        cost = data["cost"]
        orderss = db.check_order(message.from_user.id)[0]
        print(orderss)
        string = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{orderss[0]}</b>. <b>{orderss[2]}</b>\n<b>–¢–æ–≤–∞—Ä</b> - {db.get_info_product_id(orderss[4])[0][1]}.\n<b>–ê–¥—Ä–µ—Å</b>: {orderss[5]}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {orderss[6]}\n<b>–°—Ç–æ–∏—Ç–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {cost}\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {message.from_user.username}'
        await bot.send_message(chat_id=admin_id[0], text='<b>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>', parse_mode='html')
        await message.send_copy(chat_id=admin_id[0])
        await bot.send_message(admin_id[0], string, reply_markup=kb.submit_payment(str(orderss[0])), parse_mode='html')

        await message.reply('üßæ –í–∞—à —á–µ–∫ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!')
        await state.clear()
    else:
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!')


##################################################################################################################################################################


@dp.callback_query()
async def item_buy (callback: CallbackQuery, state: FSMContext):
   if callback.from_user.id in admin_id:
       if callback.data.startswith("PIN"):
           try:
                print(db.get_open_order(callback.data[3:]))
                if db.get_open_order(callback.data[3:]) is None:
                    print('Get pos code –≤–µ—Ä–Ω—É–ª: '+ str(db.get_post_code(user_id=callback.data[3:])[0]))
                    if db.get_post_code(user_id=callback.data[3:])[0] is None:
                       await callback.answer('')
                       await callback.message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
                       await state.update_data(id=int(callback.data[3:]))
                       await state.set_state(Send_post_code.wait_for_post_code)
                    else:
                        await callback.answer('–£ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –µ—Å—Ç—å –∫–æ–¥!')
                else:
                    await callback.answer('')
                    await callback.message.answer('–í—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞! ')
           except TypeError as e:
               print(e)
               await callback.answer('–í—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞!')
       else:
        await callback.answer('')
        db.move_data_to_orders(int(callback.data))
        await bot.send_message(int(callback.data), 'üßæ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–Ω–∏–º–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –û–∂–∏–¥–∞–π—Ç–µ, —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. ‚òëÔ∏è')





@dp.message(Send_post_code.wait_for_post_code)
async def resend_post_code(message: Message, state: FSMContext):
    user_id = await state.get_data()
    user_id = user_id["id"]
    await bot.send_message(chat_id=user_id, text=f'<b>–í–∞—à –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> <code>{message.text}</code>', parse_mode='html')
    await message.answer('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!')
    id_of_order = db.get_last_row_by_user_id(user_id)
    print(id_of_order)
    db.set_post_code(user_id, id_of_order, message.text)
    await state.clear()

##################################################################################################################################################################
@dp.message(F.text == '–ì–ª–∞–≤–Ω–∞—è')
async def pick (message: Message):
    await message.reply('–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!', reply_markup=kb.main_kb)


@dp.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def pick (message: Message):
    await message.reply('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Fr1st')



@dp.message(F.text == '–¢–æ–≤–∞—Ä—ã')
async def pick (message: Message):
    if message.from_user.id in admin_id:
        products = db.get_products()
        for product in products:
            await message.answer(f'<b>–¢–æ–≤–∞—Ä:</b> {product[1]}, <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product[2]}\n üîó <b>–°—Å—ã–ª–∫–∞:</b> https://t.me/fristshop_bot?start={product[0]} üîó', parse_mode='html')
    else:
        await message.reply('üîù –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ ')


@dp.message(F.text == '–ß–µ–∫–∏')
async def pick (message: Message):
    if message.from_user.id in admin_id:
        db.export_orders()
        #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω—É
        await bot.send_document(admin_id[0], types.FSInputFile('orders_export.csv'))



if __name__ == '__main__':
    asyncio.run(main())

